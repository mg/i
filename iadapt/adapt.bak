package iadapt

import "github.com/mg/i"

type ForwardItr struct {
	i.WForward
}

func Forward(itr i.Forward) *ForwardItr {
	f := ForwardItr{}
	f.WForward = *(i.WrapForward(itr))
	return &f
}

type BoundedAtStartItr struct {
	ForwardItr
	bsitr i.BoundedAtStart
}

func BoundedAtStart(itr i.BoundedAtStart) *BoundedAtStartItr {
	return &BoundedAtStartItr{ForwardItr{itr}, itr}
}

func (a *BoundedAtStartItr) First() error {
	return a.bsitr.First()
}

type BiDirectionalItr struct {
	ForwardItr
	bitr i.BiDirectional
}

func BiDirectional(itr i.BiDirectional) *BiDirectionalItr {
	return &BiDirectionalItr{ForwardItr{itr}, itr}
}

func (a *BiDirectionalItr) AtStart() interface{} {
	return a.bitr.AtStart()
}

func (a *BiDirectionalItr) Prev() error {
	return a.bitr.Prev()
}

type BoundedItr struct {
	BiDirectionalItr
	bitr i.Bounded
}

func Bounded(itr i.Bounded) *BoundedItr {
	return &BoundedItr{BiDirectionalItr{ForwardItr{itr}, itr}, itr}
}

func (a *BoundedItr) First() error {
	return a.bitr.First()
}

func (a *BoundedItr) Last() error {
	return a.bitr.Last()
}

type RandomAccessItr struct {
	BoundedItr
	ritr i.RandomAccess
}

func RandomAccess(itr i.RandomAccess) *RandomAccessItr {
	return &RandomAccessItr{BoundedItr{BiDirectionalItr{ForwardItr{itr}, itr}, itr}, itr}
}

func (a *RandomAccessItr) Goto(idx int) interface{} {
	return a.ritr.Goto(idx)
}

func (a *RandomAccessItr) Len() int {
	return a.ritr.Len()
}
